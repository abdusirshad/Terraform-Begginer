wget -O- https://apt.releases.hashicorp.com/gpg | \
    gpg --dearmor | \
    sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg


gpg --no-default-keyring \
    --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
    --fingerprint

echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
    https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
    sudo tee /etc/apt/sources.list.d/hashicorp.list


======================================================
Terraform AWS Repository
https://github.com/orgs/terraform-aws-modules/repositories

======================================================
sudo apt update
sudo apt install terraform

terraform init
terraform plan
terraform apply
terraform show
terraform destroy
terraform output
terraform validate
terraform fmt
terraform providers
terraform refresh
terraform graph


apt install graphviz -y
terraform graph | dot -Tsvg >graph.svg  -->for making graph of terraform files dependency.

In the configuration directory /root/terraform-projects/key-generator, create a file called key.tf with the following specifications:

Resource Type: tls_private_key
Resource Name: pvtkey
algorithm: RSA
rsa_bits: 4096

resource "tls_private_key" "pvtkey" {
  algorithm = "RSA"
  rsa_bits  = 4096
}


Now, let's use the private key created by this resource in another resource of type local file. Update the key.tf file with the requirements:

Resource Name: key_details

File Name: /root/key.txt
Content: use a reference expression to use the attribute called private_key_pem of the pvtkey resource.

resource "tls_private_key" "pvtkey" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "local_file" "key_details" {
  content  = tls_private_key.pvtkey.private_key_pem
  filename = "/root/key.txt"
}


create two local_file type resources in main.tf file.

Resource 1:
Resource Name: whale
File Name: /root/whale
content: whale

Resource 2:
Resource Name: krill
File Name: /root/krill
content: krill

Resource called whale should depend on krill but do not use reference expressions.

resource "local_file" "whale" {
  filename   = "/root/whale"
  content    = "whale"
  depends_on = [local_file.krill]
}
resource "local_file" "krill" {
  filename = "/root/krill"
  content  = "krill"
}



Let's start off by creating an IAM User called mary but this time by making use of Terraform. In the configuration directory /root/terraform-projects/IAM, create a file called iam-user.tf with the following specifications:

Resource Type: aws_iam_user
Resource Name: users

resource "aws_iam_user" "users" {
     name = "mary"
}

====================================================
Great! We have added one user called mary. However, project_sapphire has 5 more people who need access to the AWS Account!
Let's use the count meta-argument and the new variables.tf file created in the configuration directory to create these additional users!


Inspect the newly created variables.tf file and answer the subsequent questions.

variable "project-sapphire-users" {
     type = list(string)
     default = [ "mary", "jack", "jill", "mack", "buzz", "mater"]
}

====================================================
terraform state list
terraform state pull



Navigate to the directory /root/terraform-projects/project-cerberus. We have an empty main.tf file in this directory.
Using this configuration file write a resource block to provision a simple EC2 instance with the following specifications:

Resource Name: cerberus
AMI: ami-06178cf087598769c, use variable named ami
region: eu-west-2, use variable named region
Instance Type: m5.large, use variable named instance_type

Once ready, run terraform init, plan and apply to provision this EC2 instance.

provider.tf
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = "4.15.0"
    }
  }
}
provider "aws" {
  region                      = var.region
  skip_credentials_validation = true
  skip_requesting_account_id  = true

  endpoints {
    ec2 = "http://aws:4566"
  }
}

install-nginx.sh
#!/bin/bash
sudo yum update -y
sudo yum install nginx -y
sudo systemctl start nginx

main.tf
variable "ami" {
  default = "ami-06178cf087598769c"
}

variable "instance_type" {
  default = "m5.large"
}

variable "region" {
  default = "eu-west-2"
}

resource "aws_instance" "cerberus" {
  ami           = var.ami
  instance_type = var.instance_type
}



A new SSH key pair has been created in the directory /root/terraform-projects/project-cerberus/.ssh.
The private key is called cerberus and the public key is called cerberus.pub

Using the public key, create a new key-pair in AWS with the following specifications:
Resource Name: cerberus-key
key_name: cerberus
Use the file functions to read the the public key cerberus.pub

When ready, run a terrafom plan and apply to create this key pair.

If unsure, refer to the documentation to create a key-pair. Documentation tab is available at the top right.


main.tf
variable "ami" {
  default = "ami-06178cf087598769c"
}
variable "instance_type" {
    default = "m5.large"

}
variable "region" {
  default = "eu-west-2"
}
resource "aws_instance" "cerberus" {
    ami = var.ami
    instance_type = var.instance_type

}
#You can also use variable for key_name
resource "aws_key_pair" "cerberus-key" {
    key_name = "cerberus"
    public_key = file(".ssh/cerberus.pub")
}


Let us now configure the cerberus resource to make use of this key. Update the resource block to make use of the key called cerberus.

Once the configuration is updated, run a terraform apply to update the instance.

main.tf
variable "ami" {
  default = "ami-06178cf087598769c"
}
variable "instance_type" {
    default = "m5.large"

}
variable "region" {
  default = "eu-west-2"
}
resource "aws_instance" "cerberus" {
  ami           = var.ami
  instance_type = var.instance_type
  key_name      = "cerberus"
}
#You can also use variable for key_name
resource "aws_key_pair" "cerberus-key" {
    key_name = "cerberus"
    public_key = file(".ssh/cerberus.pub")
}


Let us now install nginx in this EC2 instance. To do this, let's make use of the user_data argument.
Using the file function again or by making use of the heredoc syntax, use the script called install-nginx.sh as the value for the user_data argument.

Do not run terraform apply yet!

main.tf
variable "ami" {
  default = "ami-06178cf087598769c"
}
variable "instance_type" {
    default = "m5.large"

}
variable "region" {
  default = "eu-west-2"
}
resource "aws_instance" "cerberus" {
    ami = var.ami
    instance_type = var.instance_type
    key_name  = "cerberus"
    user_data = file("./install-nginx.sh")

}
resource "aws_key_pair" "cerberus-key" {
    key_name = "cerberus"
    public_key = file(".ssh/cerberus.pub")
}



We use the public IPv4 address to access this server. However, when this server is rebooted or recreated, this IP address would change.
To fix this, let's create an Elastic IP Address.
An Elastic IP address is a static IPv4 address which does not change over time.

Create an Elastic IP resource with the following specifications:

Resource Name: eip
vpc: true
instance: id of the EC2 instance created for resource cerberus (use a reference expression)
create a local-exec provisioner for the eip resource and use it to print the attribute called public_dns to a file /root/cerberus_public_dns.txt on the iac-server.
If unsure, refer to the documentation. Documentation tab is available at the top right.

resource "aws_instance" "cerberus" {
  ami           = var.ami
  instance_type = var.instance_type
  user_data     = file("./install-nginx.sh")

}
resource "aws_key_pair" "cerberus-key" {
  key_name   = "cerberus"
  public_key = file(".ssh/cerberus.pub")
}
resource "aws_eip" "eip" {
  vpc      = true
  instance = aws_instance.cerberus.id
  provisioner "local-exec" {
    command = "echo ${aws_eip.eip.public_dns} >> /root/cerberus_public_dns.txt"
  }

}
variable "ami" {
  default = "ami-06178cf087598769c"
}
variable "instance_type" {
  default = "m5.large"

}
variable "region" {
  default = "eu-west-2"
}

export TF_LOG=TRACE

INFO
WARNING
ERROR
DEBUG
TRACE -->is the most informative logging for terrafom

export TF_LOG_PATH=/home/md.irshad/terraform.log
unset TF_LOG_PATH=/home/md.irshad/terraform.log

terraform workspace list